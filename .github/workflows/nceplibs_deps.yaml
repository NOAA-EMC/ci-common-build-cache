name: build-nceplibs-deps
on:
  push:
    branches:
      - main
# Do a full rebuild from scratch midnight UTC Friday (including --no-cache):
  schedule:
    - cron: '0 0 * * FRI'

jobs:
  common-build-cache:
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            compiler: "gcc",
            compiler-version: "13",
            os: "ubuntu-24.04",
            mpi: "mpich",
            mpi-version: ":",
            nceplibs-versions: "develop",
          }
        - {
            compiler: "gcc",
            compiler-version: "13",
            os: "ubuntu-24.04",
            mpi: "openmpi",
            mpi-version: ":",
            nceplibs-versions: "numbered",
          }
        - {
            compiler: "intel",
            compiler-version: "2023.2.1",
            os: "ubuntu-24.04",
            mpi: "intel-oneapi-mpi",
            mpi-version: "2021.14",
            nceplibs-versions: "numbered",
          }
        - {
            compiler: "oneapi",
            compiler-version: "2025.0",
            os: "ubuntu-24.04",
            mpi: "intel-oneapi-mpi",
            mpi-version: "2021.14",
            nceplibs-versions: "develop",
          }
    runs-on: ${{ matrix.config.os }}
    permissions:
      packages: write
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Get Spack"
        uses: spack/setup-spack@v2.1.1
        with:
          ref: a9c879d53e758f67cdbf4cec919425cb2a3a1082

      - name: "Get Intel"
        uses: NOAA-EMC/ci-install-intel-toolkit@develop
        if: ${{ matrix.config.compiler == 'intel' || matrix.config.compiler == 'oneapi' }}
        with:
          install-classic: ${{ matrix.config.compiler == 'intel' }}
          classic-version: ${{ matrix.config.compiler-version }}
          install-oneapi: ${{ matrix.config.compiler == 'oneapi' }}
          oneapi-version: ${{ matrix.config.compiler-version }}
          install-mpi: true
          mpi-version: ${{ matrix.config.mpi-version }}
          compiler-setup: ${{ matrix.config.compiler }}

      - name: "Log in to ghcr.io"
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Build and cache packages"
        shell: spack-bash {0}
        env:
          OCI_USERNAME: ${{ github.repository_owner }}
          OCI_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -x
          sudo mv /usr/local /usr/local_mv
          # Set up mirror for build caching:
          spack mirror add emc-common-build-cache oci://ghcr.io/$OCI_USERNAME/ci-common-build-cache
          spack mirror set --push --oci-username-variable OCI_USERNAME --oci-password-variable OCI_TOKEN emc-common-build-cache
          COMPILER=${{ matrix.config.compiler }}@${{ matrix.config.compiler-version }}
          # Activate environment and set up compilers:
          ln -s nceplibs_deps_${{ matrix.config.nceplibs-versions }}.yaml spack.yaml
          spack env activate .
          if [ ${{ matrix.config.os }} == ubuntu-22.04 ]; then gccver=11; fi
          if [ ${{ matrix.config.os }} == ubuntu-24.04 ]; then gccver=13; fi
          spack config add "packages:gcc-runtime:require:'%gcc@${gccver}'"
          if [ ${{ matrix.config.compiler }} == 'oneapi' ]; then
            spack compiler find /opt/intel/oneapi/compiler/${{ matrix.config.compiler-version }}
            spack compiler find /opt/intel/oneapi/compiler/${{ matrix.config.compiler-version }}/linux
          elif [ ${{ matrix.config.compiler }} == 'intel-oneapi-compilers-classic' ]; then
            intelversion=$(spack compiler find /opt/intel/oneapi/compiler/${{ matrix.config.compiler-version }}/linux/bin/intel64/ | grep -oP "intel@\K[\d\.]+")
            sed 's|environment: {}|environment:\n        prepend_path: {LD_LIBRARY_PATH: /opt/intel/oneapi/compiler/${{ matrix.config.compiler-version }}/linux/compiler/lib/intel64_lin}|' -i spack.yaml
            # Avoid various C++-related Intel compiler bugs by building some packages with GCC:
            for pkg in diffutils sed grep libidn2 tar berkeley-db gettext findutils cmake; do
              spack config add "packages:${pkg}:require:'%gcc@${gccver}'"
            done
            COMPILER=intel-oneapi-compilers-classic@$intelversion
          fi
          compilerstoallow="'%${{ matrix.config.compiler }}@${{ matrix.config.compiler-version }}'"
          if [[ " oneapi intel " =~ " ${{ matrix.config.compiler }} " ]]; then
            compilerstoallow="${compilerstoallow},'%gcc@${gccver}'"
          fi
          spack config add "concretizer:reuse:include:[${compilerstoallow}]"
          spack config add "packages:all:prefer:['%$COMPILER']"
          spack config add "packages:all:require:'target=x86_64'"
          # MPI setup.
          spack config add "packages:mpi:require:'${{ matrix.config.mpi }}@${{ matrix.config.mpi-version }}'"
          if [ "${{ matrix.config.mpi }}" == intel-oneapi-mpi ]; then
            sed -i "s|^  packages:|  packages:\n    intel-oneapi-mpi:\n      buildable: false\n      externals:\n      - spec: intel-oneapi-mpi@${{ matrix.config.mpi-version }}\n        prefix: /opt/intel/oneapi|" spack.yaml
            spack config add "packages:mpi:buildable:false"
          fi
          # Find GCC:
          spack external find gcc git git-lfs
          echo "===Beginning of spack.yaml==="
          cat spack.yaml
          echo "===End of spack.yaml==="
          # Build-n-cache:
          spack concretize --fresh |& tee log.concretize
          if [ ! -z '${{ github.event.schedule }}' ]; then NOCACHE="--no-cache"; fi
          spack config add 'config:build_stage:~/spack'
          # Don't immediately fail on failed installation so we can still cache whatever was built:
          set +e
          spack install --no-check-signature --show-log-on-error --fail-fast $NOCACHE
          rc=$?
          set -e
          spack buildcache push --update-index --unsigned --with-build-dependencies emc-common-build-cache
          if [ $rc -ne 0 ]; then return $rc; fi
          ### Generate container image with NCEPLIBS dependencies
          if [ "${{ matrix.config.build-container-nceplibs }}" == true ]; then
            label=${{ matrix.config.os }}-${{ matrix.config.compiler }}-${{ matrix.config.compiler-version }}-${{ matrix.config.mpi }}-${{ matrix.config.mpi-version }}-${{ matrix.config.nceplibs_versions }}
            label=${label//:/x}
            spack mirror add \
              --oci-username-variable OCI_USERNAME \
              --oci-password-variable OCI_TOKEN \
              nceplibs-env oci://ghcr.io/${OCI_USERNAME,,}/ci-common-build-cache/nceplibs-${label}
            image=$(echo ${{ matrix.config.os }} | sed 's|-|:|')
            spack buildcache push --only dependencies --with-build-dependencies --update-index --unsigned \
              --base-image ${image} --tag latest nceplibs-env
          fi
